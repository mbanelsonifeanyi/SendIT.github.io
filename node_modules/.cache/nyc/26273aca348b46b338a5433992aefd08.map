{"version":3,"sources":["api.js"],"names":["router","express","Router","get","request","response","status","json","sendItResources","getAllSendItResources","parcelId","parseInt","params","data","getSpecificSendItResourceByParcelId","length","success","error","userId","getSpecificSendItResourceByUserId","put","result","cancelSendItResource","post","isLength","min","withMessage","errors","isEmpty","array","userName","body","userEmail","parcelName","addToSendItResources"],"mappings":"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","file":"api.js","sourceRoot":"/Users/andela/Desktop/mbanelsonifeanyi.github.io/server/routes","sourcesContent":["import express from 'express'\r\nimport { check, validationResult } from 'express-validator/check';\r\nimport sendItResources from '../controller/sendItResources1'\r\n\r\n\r\n\r\n//  Instantiating\r\nconst router = express.Router()\r\n\r\n\r\n/*  These are API routes. */\r\n\r\nrouter.get('/parcels', (request, response) => {\r\n\tresponse.status( 200 ).json(sendItResources.getAllSendItResources (  ))\r\n})\r\n\r\nrouter.get('/parcels/:parcelId', (request, response) => {\r\n\tconst parcelId = parseInt(request.params.parcelId)\r\n\tconst data = sendItResources.getSpecificSendItResourceByParcelId( parcelId ) \r\n\tif(data.length === 0) {\r\n\t\treturn response.status(404).json({\r\n\t\t\tsuccess: false,\r\n\t\t\terror: 'Your Parcel is not found!'\r\n\t\t})\r\n\t}\r\n\tresponse.status( 200 ).json( data )\r\n})\r\n\t\r\nrouter.get('/users/:userId/parcels', (request, response) => {\r\n\tconst userId = parseInt(request.params.userId)\r\n\t\r\n\tconst data = sendItResources.getSpecificSendItResourceByUserId( userId ) \r\n\tif(data.length === 0){\r\n\t\treturn response.status(404).json({\r\n\t\t\tsuccess: false,\r\n\t\t\terror: 'User has no parcels',\r\n\t\t})\r\n\t}\r\n\treturn response.status( 200 ).json( data )\r\n})\r\n\r\nrouter.put('/parcels/:parcelId/cancel', (request, response) => {\r\n\tconst parcelId = parseInt(request.params.parcelId)\r\n\tconst result = sendItResources.getSpecificSendItResourceByParcelId(parcelId);\r\n\tconst data = sendItResources.cancelSendItResource( parcelId);\r\n\tif (result.length === 0) {\r\n\t\treturn response.status(404).json({\r\n\t\t\tsuccess: false,\r\n\t\t\terror: 'No Parcels, You ccan create one',\r\n\t\t})\r\n\t}\r\n \t\treturn response.status( 200 ).json( data )\r\n})\t\r\n\r\n\r\nrouter.post('/parcels', [\r\ncheck('userName').isLength({min: 1}).withMessage('Username cannot be empty'),\r\ncheck('userEmail').isLength({min:1}).withMessage('UserEmail cannot be blank'),\r\ncheck('parcelName').isLength({min:1}).withMessage('Parcel name cannot be blank'),\r\n], \r\n\r\n\r\n\r\n\r\n(request, response) => {\r\n\tconst errors = validationResult(request);\r\n\r\n\tif(!errors.isEmpty()){\r\n\t\treturn response.status(400).json({\r\n\t\t\tsuccess: false,\r\n\t\t\terror: 'Some credential are blank',\r\n\t\t\terrors: errors.array(),\r\n\t\t})\r\n\t}\r\n\tconst userName = request.body.userName;\r\n\tconst userEmail = request.body.userEmail;\r\n\tconst parcelName = request.body.parcelName;\r\n\tconst data = sendItResources.addToSendItResources( userName, userEmail, parcelName ) \r\nreturn \tresponse.status( 201 ).json( data)\r\n})\r\n\r\n\r\nexport default router"]}